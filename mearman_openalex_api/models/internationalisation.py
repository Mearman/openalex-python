# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  ### Python  [![GitHub](https://img.shields.io/badge/GitHub-181717?style=for-the-badge&logo=GitHub&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![CodeSpaces](https://img.shields.io/badge/CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Colab](https://img.shields.io/badge/Colab-gray?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ### Many more coming soon  ---

    The version of the OpenAPI document: 0.0.4-3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Internationalisation(BaseModel):
    """
    Internationalisation
    """ # noqa: E501
    ab: Optional[Any] = None
    ace: Optional[Any] = None
    aeb_arab: Optional[Any] = Field(default=None, alias="aeb-arab")
    af: Optional[Any] = None
    ak: Optional[Any] = None
    alt: Optional[Any] = None
    am: Optional[Any] = None
    an: Optional[Any] = None
    ang: Optional[Any] = None
    ar: Optional[Any] = None
    arc: Optional[Any] = None
    ary: Optional[Any] = None
    arz: Optional[Any] = None
    var_as: Optional[Any] = Field(default=None, alias="as")
    ast: Optional[Any] = None
    atj: Optional[Any] = None
    ay: Optional[Any] = None
    az: Optional[Any] = None
    azb: Optional[Any] = None
    ba: Optional[Any] = None
    ban: Optional[Any] = None
    bar: Optional[Any] = None
    bcl: Optional[Any] = None
    be: Optional[Any] = None
    be_tarask: Optional[Any] = Field(default=None, alias="be-tarask")
    bg: Optional[Any] = None
    bho: Optional[Any] = None
    bi: Optional[Any] = None
    bm: Optional[Any] = None
    bn: Optional[Any] = None
    bo: Optional[Any] = None
    bpy: Optional[Any] = None
    br: Optional[Any] = None
    bs: Optional[Any] = None
    bxr: Optional[Any] = None
    ca: Optional[Any] = None
    cbk_zam: Optional[Any] = Field(default=None, alias="cbk-zam")
    cdo: Optional[Any] = None
    ce: Optional[Any] = None
    ceb: Optional[Any] = None
    chr: Optional[Any] = None
    ckb: Optional[Any] = None
    co: Optional[Any] = None
    crh: Optional[Any] = None
    crh_latn: Optional[Any] = Field(default=None, alias="crh-latn")
    cs: Optional[Any] = None
    csb: Optional[Any] = None
    cv: Optional[Any] = None
    cy: Optional[Any] = None
    da: Optional[Any] = None
    de: Optional[Any] = None
    de_at: Optional[Any] = Field(default=None, alias="de-at")
    de_ch: Optional[Any] = Field(default=None, alias="de-ch")
    diq: Optional[Any] = None
    dv: Optional[Any] = None
    el: Optional[Any] = None
    eml: Optional[Any] = None
    en: Optional[Any]
    en_ca: Optional[Any] = Field(default=None, alias="en-ca")
    en_gb: Optional[Any] = Field(default=None, alias="en-gb")
    en_us: Optional[Any] = Field(default=None, alias="en-us")
    eo: Optional[Any] = None
    es: Optional[Any] = None
    et: Optional[Any] = None
    eu: Optional[Any] = None
    ext: Optional[Any] = None
    fa: Optional[Any] = None
    fi: Optional[Any] = None
    fo: Optional[Any] = None
    fr: Optional[Any] = None
    frc: Optional[Any] = None
    frp: Optional[Any] = None
    frr: Optional[Any] = None
    fur: Optional[Any] = None
    fy: Optional[Any] = None
    ga: Optional[Any] = None
    gan: Optional[Any] = None
    gan_hans: Optional[Any] = Field(default=None, alias="gan-hans")
    gan_hant: Optional[Any] = Field(default=None, alias="gan-hant")
    gcr: Optional[Any] = None
    gd: Optional[Any] = None
    gl: Optional[Any] = None
    gn: Optional[Any] = None
    gpe: Optional[Any] = None
    gsw: Optional[Any] = None
    gu: Optional[Any] = None
    gv: Optional[Any] = None
    ha: Optional[Any] = None
    hak: Optional[Any] = None
    he: Optional[Any] = None
    hi: Optional[Any] = None
    hif: Optional[Any] = None
    hr: Optional[Any] = None
    hsb: Optional[Any] = None
    ht: Optional[Any] = None
    hu: Optional[Any] = None
    hy: Optional[Any] = None
    hyw: Optional[Any] = None
    ia: Optional[Any] = None
    id: Optional[Any] = None
    ie: Optional[Any] = None
    ig: Optional[Any] = None
    ilo: Optional[Any] = None
    inh: Optional[Any] = None
    io: Optional[Any] = None
    var_is: Optional[Any] = Field(default=None, alias="is")
    it: Optional[Any] = None
    iu: Optional[Any] = None
    ja: Optional[Any] = None
    jam: Optional[Any] = None
    jv: Optional[Any] = None
    ka: Optional[Any] = None
    kaa: Optional[Any] = None
    kab: Optional[Any] = None
    kbp: Optional[Any] = None
    kg: Optional[Any] = None
    kk: Optional[Any] = None
    kk_arab: Optional[Any] = Field(default=None, alias="kk-arab")
    kk_cn: Optional[Any] = Field(default=None, alias="kk-cn")
    kk_cyrl: Optional[Any] = Field(default=None, alias="kk-cyrl")
    kk_kz: Optional[Any] = Field(default=None, alias="kk-kz")
    kk_latn: Optional[Any] = Field(default=None, alias="kk-latn")
    kk_tr: Optional[Any] = Field(default=None, alias="kk-tr")
    kl: Optional[Any] = None
    km: Optional[Any] = None
    kn: Optional[Any] = None
    ko: Optional[Any] = None
    ko_kp: Optional[Any] = Field(default=None, alias="ko-kp")
    krc: Optional[Any] = None
    ks: Optional[Any] = None
    ksh: Optional[Any] = None
    ku: Optional[Any] = None
    ku_latn: Optional[Any] = Field(default=None, alias="ku-latn")
    kw: Optional[Any] = None
    ky: Optional[Any] = None
    la: Optional[Any] = None
    lad: Optional[Any] = None
    lb: Optional[Any] = None
    lfn: Optional[Any] = None
    li: Optional[Any] = None
    lij: Optional[Any] = None
    lld: Optional[Any] = None
    lmo: Optional[Any] = None
    lo: Optional[Any] = None
    lt: Optional[Any] = None
    lv: Optional[Any] = None
    lzh: Optional[Any] = None
    mai: Optional[Any] = None
    mg: Optional[Any] = None
    min: Optional[Any] = None
    mk: Optional[Any] = None
    ml: Optional[Any] = None
    mn: Optional[Any] = None
    mni: Optional[Any] = None
    mr: Optional[Any] = None
    ms: Optional[Any] = None
    ms_arab: Optional[Any] = Field(default=None, alias="ms-arab")
    mt: Optional[Any] = None
    mwl: Optional[Any] = None
    my: Optional[Any] = None
    mzn: Optional[Any] = None
    nah: Optional[Any] = None
    nan: Optional[Any] = None
    nap: Optional[Any] = None
    nb: Optional[Any] = None
    nds: Optional[Any] = None
    nds_nl: Optional[Any] = Field(default=None, alias="nds-nl")
    ne: Optional[Any] = None
    new: Optional[Any] = None
    nia: Optional[Any] = None
    nl: Optional[Any] = None
    nn: Optional[Any] = None
    nov: Optional[Any] = None
    nqo: Optional[Any] = None
    nrm: Optional[Any] = None
    oc: Optional[Any] = None
    var_or: Optional[Any] = Field(default=None, alias="or")
    os: Optional[Any] = None
    pa: Optional[Any] = None
    pam: Optional[Any] = None
    pap: Optional[Any] = None
    pcd: Optional[Any] = None
    pdc: Optional[Any] = None
    pih: Optional[Any] = None
    pl: Optional[Any] = None
    pms: Optional[Any] = None
    pnb: Optional[Any] = None
    ps: Optional[Any] = None
    pt: Optional[Any] = None
    pt_br: Optional[Any] = Field(default=None, alias="pt-br")
    qu: Optional[Any] = None
    rm: Optional[Any] = None
    ro: Optional[Any] = None
    ru: Optional[Any] = None
    rue: Optional[Any] = None
    rw: Optional[Any] = None
    sa: Optional[Any] = None
    sah: Optional[Any] = None
    sat: Optional[Any] = None
    sc: Optional[Any] = None
    scn: Optional[Any] = None
    sco: Optional[Any] = None
    sd: Optional[Any] = None
    se: Optional[Any] = None
    sgs: Optional[Any] = None
    sh: Optional[Any] = None
    shi: Optional[Any] = None
    si: Optional[Any] = None
    sk: Optional[Any] = None
    sl: Optional[Any] = None
    smn: Optional[Any] = None
    sms: Optional[Any] = None
    so: Optional[Any] = None
    sq: Optional[Any] = None
    sr: Optional[Any] = None
    sr_ec: Optional[Any] = Field(default=None, alias="sr-ec")
    sr_el: Optional[Any] = Field(default=None, alias="sr-el")
    stq: Optional[Any] = None
    su: Optional[Any] = None
    sv: Optional[Any] = None
    sw: Optional[Any] = None
    syl: Optional[Any] = None
    szl: Optional[Any] = None
    ta: Optional[Any] = None
    te: Optional[Any] = None
    tg: Optional[Any] = None
    tg_latn: Optional[Any] = Field(default=None, alias="tg-latn")
    th: Optional[Any] = None
    ti: Optional[Any] = None
    tk: Optional[Any] = None
    tl: Optional[Any] = None
    tr: Optional[Any] = None
    ts: Optional[Any] = None
    tt: Optional[Any] = None
    tt_cyrl: Optional[Any] = Field(default=None, alias="tt-cyrl")
    tw: Optional[Any] = None
    ug: Optional[Any] = None
    uk: Optional[Any] = None
    ur: Optional[Any] = None
    uz: Optional[Any] = None
    vec: Optional[Any] = None
    vi: Optional[Any] = None
    vls: Optional[Any] = None
    vo: Optional[Any] = None
    vro: Optional[Any] = None
    wa: Optional[Any] = None
    war: Optional[Any] = None
    wo: Optional[Any] = None
    wuu: Optional[Any] = None
    xmf: Optional[Any] = None
    yi: Optional[Any] = None
    yo: Optional[Any] = None
    yue: Optional[Any] = None
    za: Optional[Any] = None
    zh: Optional[Any] = None
    zh_cn: Optional[Any] = Field(default=None, alias="zh-cn")
    zh_hans: Optional[Any] = Field(default=None, alias="zh-hans")
    zh_hant: Optional[Any] = Field(default=None, alias="zh-hant")
    zh_hk: Optional[Any] = Field(default=None, alias="zh-hk")
    zh_mo: Optional[Any] = Field(default=None, alias="zh-mo")
    zh_my: Optional[Any] = Field(default=None, alias="zh-my")
    zh_sg: Optional[Any] = Field(default=None, alias="zh-sg")
    zh_tw: Optional[Any] = Field(default=None, alias="zh-tw")
    zu: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["ab", "ace", "aeb-arab", "af", "ak", "alt", "am", "an", "ang", "ar", "arc", "ary", "arz", "as", "ast", "atj", "ay", "az", "azb", "ba", "ban", "bar", "bcl", "be", "be-tarask", "bg", "bho", "bi", "bm", "bn", "bo", "bpy", "br", "bs", "bxr", "ca", "cbk-zam", "cdo", "ce", "ceb", "chr", "ckb", "co", "crh", "crh-latn", "cs", "csb", "cv", "cy", "da", "de", "de-at", "de-ch", "diq", "dv", "el", "eml", "en", "en-ca", "en-gb", "en-us", "eo", "es", "et", "eu", "ext", "fa", "fi", "fo", "fr", "frc", "frp", "frr", "fur", "fy", "ga", "gan", "gan-hans", "gan-hant", "gcr", "gd", "gl", "gn", "gpe", "gsw", "gu", "gv", "ha", "hak", "he", "hi", "hif", "hr", "hsb", "ht", "hu", "hy", "hyw", "ia", "id", "ie", "ig", "ilo", "inh", "io", "is", "it", "iu", "ja", "jam", "jv", "ka", "kaa", "kab", "kbp", "kg", "kk", "kk-arab", "kk-cn", "kk-cyrl", "kk-kz", "kk-latn", "kk-tr", "kl", "km", "kn", "ko", "ko-kp", "krc", "ks", "ksh", "ku", "ku-latn", "kw", "ky", "la", "lad", "lb", "lfn", "li", "lij", "lld", "lmo", "lo", "lt", "lv", "lzh", "mai", "mg", "min", "mk", "ml", "mn", "mni", "mr", "ms", "ms-arab", "mt", "mwl", "my", "mzn", "nah", "nan", "nap", "nb", "nds", "nds-nl", "ne", "new", "nia", "nl", "nn", "nov", "nqo", "nrm", "oc", "or", "os", "pa", "pam", "pap", "pcd", "pdc", "pih", "pl", "pms", "pnb", "ps", "pt", "pt-br", "qu", "rm", "ro", "ru", "rue", "rw", "sa", "sah", "sat", "sc", "scn", "sco", "sd", "se", "sgs", "sh", "shi", "si", "sk", "sl", "smn", "sms", "so", "sq", "sr", "sr-ec", "sr-el", "stq", "su", "sv", "sw", "syl", "szl", "ta", "te", "tg", "tg-latn", "th", "ti", "tk", "tl", "tr", "ts", "tt", "tt-cyrl", "tw", "ug", "uk", "ur", "uz", "vec", "vi", "vls", "vo", "vro", "wa", "war", "wo", "wuu", "xmf", "yi", "yo", "yue", "za", "zh", "zh-cn", "zh-hans", "zh-hant", "zh-hk", "zh-mo", "zh-my", "zh-sg", "zh-tw", "zu"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Internationalisation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if ab (nullable) is None
        # and model_fields_set contains the field
        if self.ab is None and "ab" in self.model_fields_set:
            _dict['ab'] = None

        # set to None if ace (nullable) is None
        # and model_fields_set contains the field
        if self.ace is None and "ace" in self.model_fields_set:
            _dict['ace'] = None

        # set to None if aeb_arab (nullable) is None
        # and model_fields_set contains the field
        if self.aeb_arab is None and "aeb_arab" in self.model_fields_set:
            _dict['aeb-arab'] = None

        # set to None if af (nullable) is None
        # and model_fields_set contains the field
        if self.af is None and "af" in self.model_fields_set:
            _dict['af'] = None

        # set to None if ak (nullable) is None
        # and model_fields_set contains the field
        if self.ak is None and "ak" in self.model_fields_set:
            _dict['ak'] = None

        # set to None if alt (nullable) is None
        # and model_fields_set contains the field
        if self.alt is None and "alt" in self.model_fields_set:
            _dict['alt'] = None

        # set to None if am (nullable) is None
        # and model_fields_set contains the field
        if self.am is None and "am" in self.model_fields_set:
            _dict['am'] = None

        # set to None if an (nullable) is None
        # and model_fields_set contains the field
        if self.an is None and "an" in self.model_fields_set:
            _dict['an'] = None

        # set to None if ang (nullable) is None
        # and model_fields_set contains the field
        if self.ang is None and "ang" in self.model_fields_set:
            _dict['ang'] = None

        # set to None if ar (nullable) is None
        # and model_fields_set contains the field
        if self.ar is None and "ar" in self.model_fields_set:
            _dict['ar'] = None

        # set to None if arc (nullable) is None
        # and model_fields_set contains the field
        if self.arc is None and "arc" in self.model_fields_set:
            _dict['arc'] = None

        # set to None if ary (nullable) is None
        # and model_fields_set contains the field
        if self.ary is None and "ary" in self.model_fields_set:
            _dict['ary'] = None

        # set to None if arz (nullable) is None
        # and model_fields_set contains the field
        if self.arz is None and "arz" in self.model_fields_set:
            _dict['arz'] = None

        # set to None if var_as (nullable) is None
        # and model_fields_set contains the field
        if self.var_as is None and "var_as" in self.model_fields_set:
            _dict['as'] = None

        # set to None if ast (nullable) is None
        # and model_fields_set contains the field
        if self.ast is None and "ast" in self.model_fields_set:
            _dict['ast'] = None

        # set to None if atj (nullable) is None
        # and model_fields_set contains the field
        if self.atj is None and "atj" in self.model_fields_set:
            _dict['atj'] = None

        # set to None if ay (nullable) is None
        # and model_fields_set contains the field
        if self.ay is None and "ay" in self.model_fields_set:
            _dict['ay'] = None

        # set to None if az (nullable) is None
        # and model_fields_set contains the field
        if self.az is None and "az" in self.model_fields_set:
            _dict['az'] = None

        # set to None if azb (nullable) is None
        # and model_fields_set contains the field
        if self.azb is None and "azb" in self.model_fields_set:
            _dict['azb'] = None

        # set to None if ba (nullable) is None
        # and model_fields_set contains the field
        if self.ba is None and "ba" in self.model_fields_set:
            _dict['ba'] = None

        # set to None if ban (nullable) is None
        # and model_fields_set contains the field
        if self.ban is None and "ban" in self.model_fields_set:
            _dict['ban'] = None

        # set to None if bar (nullable) is None
        # and model_fields_set contains the field
        if self.bar is None and "bar" in self.model_fields_set:
            _dict['bar'] = None

        # set to None if bcl (nullable) is None
        # and model_fields_set contains the field
        if self.bcl is None and "bcl" in self.model_fields_set:
            _dict['bcl'] = None

        # set to None if be (nullable) is None
        # and model_fields_set contains the field
        if self.be is None and "be" in self.model_fields_set:
            _dict['be'] = None

        # set to None if be_tarask (nullable) is None
        # and model_fields_set contains the field
        if self.be_tarask is None and "be_tarask" in self.model_fields_set:
            _dict['be-tarask'] = None

        # set to None if bg (nullable) is None
        # and model_fields_set contains the field
        if self.bg is None and "bg" in self.model_fields_set:
            _dict['bg'] = None

        # set to None if bho (nullable) is None
        # and model_fields_set contains the field
        if self.bho is None and "bho" in self.model_fields_set:
            _dict['bho'] = None

        # set to None if bi (nullable) is None
        # and model_fields_set contains the field
        if self.bi is None and "bi" in self.model_fields_set:
            _dict['bi'] = None

        # set to None if bm (nullable) is None
        # and model_fields_set contains the field
        if self.bm is None and "bm" in self.model_fields_set:
            _dict['bm'] = None

        # set to None if bn (nullable) is None
        # and model_fields_set contains the field
        if self.bn is None and "bn" in self.model_fields_set:
            _dict['bn'] = None

        # set to None if bo (nullable) is None
        # and model_fields_set contains the field
        if self.bo is None and "bo" in self.model_fields_set:
            _dict['bo'] = None

        # set to None if bpy (nullable) is None
        # and model_fields_set contains the field
        if self.bpy is None and "bpy" in self.model_fields_set:
            _dict['bpy'] = None

        # set to None if br (nullable) is None
        # and model_fields_set contains the field
        if self.br is None and "br" in self.model_fields_set:
            _dict['br'] = None

        # set to None if bs (nullable) is None
        # and model_fields_set contains the field
        if self.bs is None and "bs" in self.model_fields_set:
            _dict['bs'] = None

        # set to None if bxr (nullable) is None
        # and model_fields_set contains the field
        if self.bxr is None and "bxr" in self.model_fields_set:
            _dict['bxr'] = None

        # set to None if ca (nullable) is None
        # and model_fields_set contains the field
        if self.ca is None and "ca" in self.model_fields_set:
            _dict['ca'] = None

        # set to None if cbk_zam (nullable) is None
        # and model_fields_set contains the field
        if self.cbk_zam is None and "cbk_zam" in self.model_fields_set:
            _dict['cbk-zam'] = None

        # set to None if cdo (nullable) is None
        # and model_fields_set contains the field
        if self.cdo is None and "cdo" in self.model_fields_set:
            _dict['cdo'] = None

        # set to None if ce (nullable) is None
        # and model_fields_set contains the field
        if self.ce is None and "ce" in self.model_fields_set:
            _dict['ce'] = None

        # set to None if ceb (nullable) is None
        # and model_fields_set contains the field
        if self.ceb is None and "ceb" in self.model_fields_set:
            _dict['ceb'] = None

        # set to None if chr (nullable) is None
        # and model_fields_set contains the field
        if self.chr is None and "chr" in self.model_fields_set:
            _dict['chr'] = None

        # set to None if ckb (nullable) is None
        # and model_fields_set contains the field
        if self.ckb is None and "ckb" in self.model_fields_set:
            _dict['ckb'] = None

        # set to None if co (nullable) is None
        # and model_fields_set contains the field
        if self.co is None and "co" in self.model_fields_set:
            _dict['co'] = None

        # set to None if crh (nullable) is None
        # and model_fields_set contains the field
        if self.crh is None and "crh" in self.model_fields_set:
            _dict['crh'] = None

        # set to None if crh_latn (nullable) is None
        # and model_fields_set contains the field
        if self.crh_latn is None and "crh_latn" in self.model_fields_set:
            _dict['crh-latn'] = None

        # set to None if cs (nullable) is None
        # and model_fields_set contains the field
        if self.cs is None and "cs" in self.model_fields_set:
            _dict['cs'] = None

        # set to None if csb (nullable) is None
        # and model_fields_set contains the field
        if self.csb is None and "csb" in self.model_fields_set:
            _dict['csb'] = None

        # set to None if cv (nullable) is None
        # and model_fields_set contains the field
        if self.cv is None and "cv" in self.model_fields_set:
            _dict['cv'] = None

        # set to None if cy (nullable) is None
        # and model_fields_set contains the field
        if self.cy is None and "cy" in self.model_fields_set:
            _dict['cy'] = None

        # set to None if da (nullable) is None
        # and model_fields_set contains the field
        if self.da is None and "da" in self.model_fields_set:
            _dict['da'] = None

        # set to None if de (nullable) is None
        # and model_fields_set contains the field
        if self.de is None and "de" in self.model_fields_set:
            _dict['de'] = None

        # set to None if de_at (nullable) is None
        # and model_fields_set contains the field
        if self.de_at is None and "de_at" in self.model_fields_set:
            _dict['de-at'] = None

        # set to None if de_ch (nullable) is None
        # and model_fields_set contains the field
        if self.de_ch is None and "de_ch" in self.model_fields_set:
            _dict['de-ch'] = None

        # set to None if diq (nullable) is None
        # and model_fields_set contains the field
        if self.diq is None and "diq" in self.model_fields_set:
            _dict['diq'] = None

        # set to None if dv (nullable) is None
        # and model_fields_set contains the field
        if self.dv is None and "dv" in self.model_fields_set:
            _dict['dv'] = None

        # set to None if el (nullable) is None
        # and model_fields_set contains the field
        if self.el is None and "el" in self.model_fields_set:
            _dict['el'] = None

        # set to None if eml (nullable) is None
        # and model_fields_set contains the field
        if self.eml is None and "eml" in self.model_fields_set:
            _dict['eml'] = None

        # set to None if en (nullable) is None
        # and model_fields_set contains the field
        if self.en is None and "en" in self.model_fields_set:
            _dict['en'] = None

        # set to None if en_ca (nullable) is None
        # and model_fields_set contains the field
        if self.en_ca is None and "en_ca" in self.model_fields_set:
            _dict['en-ca'] = None

        # set to None if en_gb (nullable) is None
        # and model_fields_set contains the field
        if self.en_gb is None and "en_gb" in self.model_fields_set:
            _dict['en-gb'] = None

        # set to None if en_us (nullable) is None
        # and model_fields_set contains the field
        if self.en_us is None and "en_us" in self.model_fields_set:
            _dict['en-us'] = None

        # set to None if eo (nullable) is None
        # and model_fields_set contains the field
        if self.eo is None and "eo" in self.model_fields_set:
            _dict['eo'] = None

        # set to None if es (nullable) is None
        # and model_fields_set contains the field
        if self.es is None and "es" in self.model_fields_set:
            _dict['es'] = None

        # set to None if et (nullable) is None
        # and model_fields_set contains the field
        if self.et is None and "et" in self.model_fields_set:
            _dict['et'] = None

        # set to None if eu (nullable) is None
        # and model_fields_set contains the field
        if self.eu is None and "eu" in self.model_fields_set:
            _dict['eu'] = None

        # set to None if ext (nullable) is None
        # and model_fields_set contains the field
        if self.ext is None and "ext" in self.model_fields_set:
            _dict['ext'] = None

        # set to None if fa (nullable) is None
        # and model_fields_set contains the field
        if self.fa is None and "fa" in self.model_fields_set:
            _dict['fa'] = None

        # set to None if fi (nullable) is None
        # and model_fields_set contains the field
        if self.fi is None and "fi" in self.model_fields_set:
            _dict['fi'] = None

        # set to None if fo (nullable) is None
        # and model_fields_set contains the field
        if self.fo is None and "fo" in self.model_fields_set:
            _dict['fo'] = None

        # set to None if fr (nullable) is None
        # and model_fields_set contains the field
        if self.fr is None and "fr" in self.model_fields_set:
            _dict['fr'] = None

        # set to None if frc (nullable) is None
        # and model_fields_set contains the field
        if self.frc is None and "frc" in self.model_fields_set:
            _dict['frc'] = None

        # set to None if frp (nullable) is None
        # and model_fields_set contains the field
        if self.frp is None and "frp" in self.model_fields_set:
            _dict['frp'] = None

        # set to None if frr (nullable) is None
        # and model_fields_set contains the field
        if self.frr is None and "frr" in self.model_fields_set:
            _dict['frr'] = None

        # set to None if fur (nullable) is None
        # and model_fields_set contains the field
        if self.fur is None and "fur" in self.model_fields_set:
            _dict['fur'] = None

        # set to None if fy (nullable) is None
        # and model_fields_set contains the field
        if self.fy is None and "fy" in self.model_fields_set:
            _dict['fy'] = None

        # set to None if ga (nullable) is None
        # and model_fields_set contains the field
        if self.ga is None and "ga" in self.model_fields_set:
            _dict['ga'] = None

        # set to None if gan (nullable) is None
        # and model_fields_set contains the field
        if self.gan is None and "gan" in self.model_fields_set:
            _dict['gan'] = None

        # set to None if gan_hans (nullable) is None
        # and model_fields_set contains the field
        if self.gan_hans is None and "gan_hans" in self.model_fields_set:
            _dict['gan-hans'] = None

        # set to None if gan_hant (nullable) is None
        # and model_fields_set contains the field
        if self.gan_hant is None and "gan_hant" in self.model_fields_set:
            _dict['gan-hant'] = None

        # set to None if gcr (nullable) is None
        # and model_fields_set contains the field
        if self.gcr is None and "gcr" in self.model_fields_set:
            _dict['gcr'] = None

        # set to None if gd (nullable) is None
        # and model_fields_set contains the field
        if self.gd is None and "gd" in self.model_fields_set:
            _dict['gd'] = None

        # set to None if gl (nullable) is None
        # and model_fields_set contains the field
        if self.gl is None and "gl" in self.model_fields_set:
            _dict['gl'] = None

        # set to None if gn (nullable) is None
        # and model_fields_set contains the field
        if self.gn is None and "gn" in self.model_fields_set:
            _dict['gn'] = None

        # set to None if gpe (nullable) is None
        # and model_fields_set contains the field
        if self.gpe is None and "gpe" in self.model_fields_set:
            _dict['gpe'] = None

        # set to None if gsw (nullable) is None
        # and model_fields_set contains the field
        if self.gsw is None and "gsw" in self.model_fields_set:
            _dict['gsw'] = None

        # set to None if gu (nullable) is None
        # and model_fields_set contains the field
        if self.gu is None and "gu" in self.model_fields_set:
            _dict['gu'] = None

        # set to None if gv (nullable) is None
        # and model_fields_set contains the field
        if self.gv is None and "gv" in self.model_fields_set:
            _dict['gv'] = None

        # set to None if ha (nullable) is None
        # and model_fields_set contains the field
        if self.ha is None and "ha" in self.model_fields_set:
            _dict['ha'] = None

        # set to None if hak (nullable) is None
        # and model_fields_set contains the field
        if self.hak is None and "hak" in self.model_fields_set:
            _dict['hak'] = None

        # set to None if he (nullable) is None
        # and model_fields_set contains the field
        if self.he is None and "he" in self.model_fields_set:
            _dict['he'] = None

        # set to None if hi (nullable) is None
        # and model_fields_set contains the field
        if self.hi is None and "hi" in self.model_fields_set:
            _dict['hi'] = None

        # set to None if hif (nullable) is None
        # and model_fields_set contains the field
        if self.hif is None and "hif" in self.model_fields_set:
            _dict['hif'] = None

        # set to None if hr (nullable) is None
        # and model_fields_set contains the field
        if self.hr is None and "hr" in self.model_fields_set:
            _dict['hr'] = None

        # set to None if hsb (nullable) is None
        # and model_fields_set contains the field
        if self.hsb is None and "hsb" in self.model_fields_set:
            _dict['hsb'] = None

        # set to None if ht (nullable) is None
        # and model_fields_set contains the field
        if self.ht is None and "ht" in self.model_fields_set:
            _dict['ht'] = None

        # set to None if hu (nullable) is None
        # and model_fields_set contains the field
        if self.hu is None and "hu" in self.model_fields_set:
            _dict['hu'] = None

        # set to None if hy (nullable) is None
        # and model_fields_set contains the field
        if self.hy is None and "hy" in self.model_fields_set:
            _dict['hy'] = None

        # set to None if hyw (nullable) is None
        # and model_fields_set contains the field
        if self.hyw is None and "hyw" in self.model_fields_set:
            _dict['hyw'] = None

        # set to None if ia (nullable) is None
        # and model_fields_set contains the field
        if self.ia is None and "ia" in self.model_fields_set:
            _dict['ia'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ie (nullable) is None
        # and model_fields_set contains the field
        if self.ie is None and "ie" in self.model_fields_set:
            _dict['ie'] = None

        # set to None if ig (nullable) is None
        # and model_fields_set contains the field
        if self.ig is None and "ig" in self.model_fields_set:
            _dict['ig'] = None

        # set to None if ilo (nullable) is None
        # and model_fields_set contains the field
        if self.ilo is None and "ilo" in self.model_fields_set:
            _dict['ilo'] = None

        # set to None if inh (nullable) is None
        # and model_fields_set contains the field
        if self.inh is None and "inh" in self.model_fields_set:
            _dict['inh'] = None

        # set to None if io (nullable) is None
        # and model_fields_set contains the field
        if self.io is None and "io" in self.model_fields_set:
            _dict['io'] = None

        # set to None if var_is (nullable) is None
        # and model_fields_set contains the field
        if self.var_is is None and "var_is" in self.model_fields_set:
            _dict['is'] = None

        # set to None if it (nullable) is None
        # and model_fields_set contains the field
        if self.it is None and "it" in self.model_fields_set:
            _dict['it'] = None

        # set to None if iu (nullable) is None
        # and model_fields_set contains the field
        if self.iu is None and "iu" in self.model_fields_set:
            _dict['iu'] = None

        # set to None if ja (nullable) is None
        # and model_fields_set contains the field
        if self.ja is None and "ja" in self.model_fields_set:
            _dict['ja'] = None

        # set to None if jam (nullable) is None
        # and model_fields_set contains the field
        if self.jam is None and "jam" in self.model_fields_set:
            _dict['jam'] = None

        # set to None if jv (nullable) is None
        # and model_fields_set contains the field
        if self.jv is None and "jv" in self.model_fields_set:
            _dict['jv'] = None

        # set to None if ka (nullable) is None
        # and model_fields_set contains the field
        if self.ka is None and "ka" in self.model_fields_set:
            _dict['ka'] = None

        # set to None if kaa (nullable) is None
        # and model_fields_set contains the field
        if self.kaa is None and "kaa" in self.model_fields_set:
            _dict['kaa'] = None

        # set to None if kab (nullable) is None
        # and model_fields_set contains the field
        if self.kab is None and "kab" in self.model_fields_set:
            _dict['kab'] = None

        # set to None if kbp (nullable) is None
        # and model_fields_set contains the field
        if self.kbp is None and "kbp" in self.model_fields_set:
            _dict['kbp'] = None

        # set to None if kg (nullable) is None
        # and model_fields_set contains the field
        if self.kg is None and "kg" in self.model_fields_set:
            _dict['kg'] = None

        # set to None if kk (nullable) is None
        # and model_fields_set contains the field
        if self.kk is None and "kk" in self.model_fields_set:
            _dict['kk'] = None

        # set to None if kk_arab (nullable) is None
        # and model_fields_set contains the field
        if self.kk_arab is None and "kk_arab" in self.model_fields_set:
            _dict['kk-arab'] = None

        # set to None if kk_cn (nullable) is None
        # and model_fields_set contains the field
        if self.kk_cn is None and "kk_cn" in self.model_fields_set:
            _dict['kk-cn'] = None

        # set to None if kk_cyrl (nullable) is None
        # and model_fields_set contains the field
        if self.kk_cyrl is None and "kk_cyrl" in self.model_fields_set:
            _dict['kk-cyrl'] = None

        # set to None if kk_kz (nullable) is None
        # and model_fields_set contains the field
        if self.kk_kz is None and "kk_kz" in self.model_fields_set:
            _dict['kk-kz'] = None

        # set to None if kk_latn (nullable) is None
        # and model_fields_set contains the field
        if self.kk_latn is None and "kk_latn" in self.model_fields_set:
            _dict['kk-latn'] = None

        # set to None if kk_tr (nullable) is None
        # and model_fields_set contains the field
        if self.kk_tr is None and "kk_tr" in self.model_fields_set:
            _dict['kk-tr'] = None

        # set to None if kl (nullable) is None
        # and model_fields_set contains the field
        if self.kl is None and "kl" in self.model_fields_set:
            _dict['kl'] = None

        # set to None if km (nullable) is None
        # and model_fields_set contains the field
        if self.km is None and "km" in self.model_fields_set:
            _dict['km'] = None

        # set to None if kn (nullable) is None
        # and model_fields_set contains the field
        if self.kn is None and "kn" in self.model_fields_set:
            _dict['kn'] = None

        # set to None if ko (nullable) is None
        # and model_fields_set contains the field
        if self.ko is None and "ko" in self.model_fields_set:
            _dict['ko'] = None

        # set to None if ko_kp (nullable) is None
        # and model_fields_set contains the field
        if self.ko_kp is None and "ko_kp" in self.model_fields_set:
            _dict['ko-kp'] = None

        # set to None if krc (nullable) is None
        # and model_fields_set contains the field
        if self.krc is None and "krc" in self.model_fields_set:
            _dict['krc'] = None

        # set to None if ks (nullable) is None
        # and model_fields_set contains the field
        if self.ks is None and "ks" in self.model_fields_set:
            _dict['ks'] = None

        # set to None if ksh (nullable) is None
        # and model_fields_set contains the field
        if self.ksh is None and "ksh" in self.model_fields_set:
            _dict['ksh'] = None

        # set to None if ku (nullable) is None
        # and model_fields_set contains the field
        if self.ku is None and "ku" in self.model_fields_set:
            _dict['ku'] = None

        # set to None if ku_latn (nullable) is None
        # and model_fields_set contains the field
        if self.ku_latn is None and "ku_latn" in self.model_fields_set:
            _dict['ku-latn'] = None

        # set to None if kw (nullable) is None
        # and model_fields_set contains the field
        if self.kw is None and "kw" in self.model_fields_set:
            _dict['kw'] = None

        # set to None if ky (nullable) is None
        # and model_fields_set contains the field
        if self.ky is None and "ky" in self.model_fields_set:
            _dict['ky'] = None

        # set to None if la (nullable) is None
        # and model_fields_set contains the field
        if self.la is None and "la" in self.model_fields_set:
            _dict['la'] = None

        # set to None if lad (nullable) is None
        # and model_fields_set contains the field
        if self.lad is None and "lad" in self.model_fields_set:
            _dict['lad'] = None

        # set to None if lb (nullable) is None
        # and model_fields_set contains the field
        if self.lb is None and "lb" in self.model_fields_set:
            _dict['lb'] = None

        # set to None if lfn (nullable) is None
        # and model_fields_set contains the field
        if self.lfn is None and "lfn" in self.model_fields_set:
            _dict['lfn'] = None

        # set to None if li (nullable) is None
        # and model_fields_set contains the field
        if self.li is None and "li" in self.model_fields_set:
            _dict['li'] = None

        # set to None if lij (nullable) is None
        # and model_fields_set contains the field
        if self.lij is None and "lij" in self.model_fields_set:
            _dict['lij'] = None

        # set to None if lld (nullable) is None
        # and model_fields_set contains the field
        if self.lld is None and "lld" in self.model_fields_set:
            _dict['lld'] = None

        # set to None if lmo (nullable) is None
        # and model_fields_set contains the field
        if self.lmo is None and "lmo" in self.model_fields_set:
            _dict['lmo'] = None

        # set to None if lo (nullable) is None
        # and model_fields_set contains the field
        if self.lo is None and "lo" in self.model_fields_set:
            _dict['lo'] = None

        # set to None if lt (nullable) is None
        # and model_fields_set contains the field
        if self.lt is None and "lt" in self.model_fields_set:
            _dict['lt'] = None

        # set to None if lv (nullable) is None
        # and model_fields_set contains the field
        if self.lv is None and "lv" in self.model_fields_set:
            _dict['lv'] = None

        # set to None if lzh (nullable) is None
        # and model_fields_set contains the field
        if self.lzh is None and "lzh" in self.model_fields_set:
            _dict['lzh'] = None

        # set to None if mai (nullable) is None
        # and model_fields_set contains the field
        if self.mai is None and "mai" in self.model_fields_set:
            _dict['mai'] = None

        # set to None if mg (nullable) is None
        # and model_fields_set contains the field
        if self.mg is None and "mg" in self.model_fields_set:
            _dict['mg'] = None

        # set to None if min (nullable) is None
        # and model_fields_set contains the field
        if self.min is None and "min" in self.model_fields_set:
            _dict['min'] = None

        # set to None if mk (nullable) is None
        # and model_fields_set contains the field
        if self.mk is None and "mk" in self.model_fields_set:
            _dict['mk'] = None

        # set to None if ml (nullable) is None
        # and model_fields_set contains the field
        if self.ml is None and "ml" in self.model_fields_set:
            _dict['ml'] = None

        # set to None if mn (nullable) is None
        # and model_fields_set contains the field
        if self.mn is None and "mn" in self.model_fields_set:
            _dict['mn'] = None

        # set to None if mni (nullable) is None
        # and model_fields_set contains the field
        if self.mni is None and "mni" in self.model_fields_set:
            _dict['mni'] = None

        # set to None if mr (nullable) is None
        # and model_fields_set contains the field
        if self.mr is None and "mr" in self.model_fields_set:
            _dict['mr'] = None

        # set to None if ms (nullable) is None
        # and model_fields_set contains the field
        if self.ms is None and "ms" in self.model_fields_set:
            _dict['ms'] = None

        # set to None if ms_arab (nullable) is None
        # and model_fields_set contains the field
        if self.ms_arab is None and "ms_arab" in self.model_fields_set:
            _dict['ms-arab'] = None

        # set to None if mt (nullable) is None
        # and model_fields_set contains the field
        if self.mt is None and "mt" in self.model_fields_set:
            _dict['mt'] = None

        # set to None if mwl (nullable) is None
        # and model_fields_set contains the field
        if self.mwl is None and "mwl" in self.model_fields_set:
            _dict['mwl'] = None

        # set to None if my (nullable) is None
        # and model_fields_set contains the field
        if self.my is None and "my" in self.model_fields_set:
            _dict['my'] = None

        # set to None if mzn (nullable) is None
        # and model_fields_set contains the field
        if self.mzn is None and "mzn" in self.model_fields_set:
            _dict['mzn'] = None

        # set to None if nah (nullable) is None
        # and model_fields_set contains the field
        if self.nah is None and "nah" in self.model_fields_set:
            _dict['nah'] = None

        # set to None if nan (nullable) is None
        # and model_fields_set contains the field
        if self.nan is None and "nan" in self.model_fields_set:
            _dict['nan'] = None

        # set to None if nap (nullable) is None
        # and model_fields_set contains the field
        if self.nap is None and "nap" in self.model_fields_set:
            _dict['nap'] = None

        # set to None if nb (nullable) is None
        # and model_fields_set contains the field
        if self.nb is None and "nb" in self.model_fields_set:
            _dict['nb'] = None

        # set to None if nds (nullable) is None
        # and model_fields_set contains the field
        if self.nds is None and "nds" in self.model_fields_set:
            _dict['nds'] = None

        # set to None if nds_nl (nullable) is None
        # and model_fields_set contains the field
        if self.nds_nl is None and "nds_nl" in self.model_fields_set:
            _dict['nds-nl'] = None

        # set to None if ne (nullable) is None
        # and model_fields_set contains the field
        if self.ne is None and "ne" in self.model_fields_set:
            _dict['ne'] = None

        # set to None if new (nullable) is None
        # and model_fields_set contains the field
        if self.new is None and "new" in self.model_fields_set:
            _dict['new'] = None

        # set to None if nia (nullable) is None
        # and model_fields_set contains the field
        if self.nia is None and "nia" in self.model_fields_set:
            _dict['nia'] = None

        # set to None if nl (nullable) is None
        # and model_fields_set contains the field
        if self.nl is None and "nl" in self.model_fields_set:
            _dict['nl'] = None

        # set to None if nn (nullable) is None
        # and model_fields_set contains the field
        if self.nn is None and "nn" in self.model_fields_set:
            _dict['nn'] = None

        # set to None if nov (nullable) is None
        # and model_fields_set contains the field
        if self.nov is None and "nov" in self.model_fields_set:
            _dict['nov'] = None

        # set to None if nqo (nullable) is None
        # and model_fields_set contains the field
        if self.nqo is None and "nqo" in self.model_fields_set:
            _dict['nqo'] = None

        # set to None if nrm (nullable) is None
        # and model_fields_set contains the field
        if self.nrm is None and "nrm" in self.model_fields_set:
            _dict['nrm'] = None

        # set to None if oc (nullable) is None
        # and model_fields_set contains the field
        if self.oc is None and "oc" in self.model_fields_set:
            _dict['oc'] = None

        # set to None if var_or (nullable) is None
        # and model_fields_set contains the field
        if self.var_or is None and "var_or" in self.model_fields_set:
            _dict['or'] = None

        # set to None if os (nullable) is None
        # and model_fields_set contains the field
        if self.os is None and "os" in self.model_fields_set:
            _dict['os'] = None

        # set to None if pa (nullable) is None
        # and model_fields_set contains the field
        if self.pa is None and "pa" in self.model_fields_set:
            _dict['pa'] = None

        # set to None if pam (nullable) is None
        # and model_fields_set contains the field
        if self.pam is None and "pam" in self.model_fields_set:
            _dict['pam'] = None

        # set to None if pap (nullable) is None
        # and model_fields_set contains the field
        if self.pap is None and "pap" in self.model_fields_set:
            _dict['pap'] = None

        # set to None if pcd (nullable) is None
        # and model_fields_set contains the field
        if self.pcd is None and "pcd" in self.model_fields_set:
            _dict['pcd'] = None

        # set to None if pdc (nullable) is None
        # and model_fields_set contains the field
        if self.pdc is None and "pdc" in self.model_fields_set:
            _dict['pdc'] = None

        # set to None if pih (nullable) is None
        # and model_fields_set contains the field
        if self.pih is None and "pih" in self.model_fields_set:
            _dict['pih'] = None

        # set to None if pl (nullable) is None
        # and model_fields_set contains the field
        if self.pl is None and "pl" in self.model_fields_set:
            _dict['pl'] = None

        # set to None if pms (nullable) is None
        # and model_fields_set contains the field
        if self.pms is None and "pms" in self.model_fields_set:
            _dict['pms'] = None

        # set to None if pnb (nullable) is None
        # and model_fields_set contains the field
        if self.pnb is None and "pnb" in self.model_fields_set:
            _dict['pnb'] = None

        # set to None if ps (nullable) is None
        # and model_fields_set contains the field
        if self.ps is None and "ps" in self.model_fields_set:
            _dict['ps'] = None

        # set to None if pt (nullable) is None
        # and model_fields_set contains the field
        if self.pt is None and "pt" in self.model_fields_set:
            _dict['pt'] = None

        # set to None if pt_br (nullable) is None
        # and model_fields_set contains the field
        if self.pt_br is None and "pt_br" in self.model_fields_set:
            _dict['pt-br'] = None

        # set to None if qu (nullable) is None
        # and model_fields_set contains the field
        if self.qu is None and "qu" in self.model_fields_set:
            _dict['qu'] = None

        # set to None if rm (nullable) is None
        # and model_fields_set contains the field
        if self.rm is None and "rm" in self.model_fields_set:
            _dict['rm'] = None

        # set to None if ro (nullable) is None
        # and model_fields_set contains the field
        if self.ro is None and "ro" in self.model_fields_set:
            _dict['ro'] = None

        # set to None if ru (nullable) is None
        # and model_fields_set contains the field
        if self.ru is None and "ru" in self.model_fields_set:
            _dict['ru'] = None

        # set to None if rue (nullable) is None
        # and model_fields_set contains the field
        if self.rue is None and "rue" in self.model_fields_set:
            _dict['rue'] = None

        # set to None if rw (nullable) is None
        # and model_fields_set contains the field
        if self.rw is None and "rw" in self.model_fields_set:
            _dict['rw'] = None

        # set to None if sa (nullable) is None
        # and model_fields_set contains the field
        if self.sa is None and "sa" in self.model_fields_set:
            _dict['sa'] = None

        # set to None if sah (nullable) is None
        # and model_fields_set contains the field
        if self.sah is None and "sah" in self.model_fields_set:
            _dict['sah'] = None

        # set to None if sat (nullable) is None
        # and model_fields_set contains the field
        if self.sat is None and "sat" in self.model_fields_set:
            _dict['sat'] = None

        # set to None if sc (nullable) is None
        # and model_fields_set contains the field
        if self.sc is None and "sc" in self.model_fields_set:
            _dict['sc'] = None

        # set to None if scn (nullable) is None
        # and model_fields_set contains the field
        if self.scn is None and "scn" in self.model_fields_set:
            _dict['scn'] = None

        # set to None if sco (nullable) is None
        # and model_fields_set contains the field
        if self.sco is None and "sco" in self.model_fields_set:
            _dict['sco'] = None

        # set to None if sd (nullable) is None
        # and model_fields_set contains the field
        if self.sd is None and "sd" in self.model_fields_set:
            _dict['sd'] = None

        # set to None if se (nullable) is None
        # and model_fields_set contains the field
        if self.se is None and "se" in self.model_fields_set:
            _dict['se'] = None

        # set to None if sgs (nullable) is None
        # and model_fields_set contains the field
        if self.sgs is None and "sgs" in self.model_fields_set:
            _dict['sgs'] = None

        # set to None if sh (nullable) is None
        # and model_fields_set contains the field
        if self.sh is None and "sh" in self.model_fields_set:
            _dict['sh'] = None

        # set to None if shi (nullable) is None
        # and model_fields_set contains the field
        if self.shi is None and "shi" in self.model_fields_set:
            _dict['shi'] = None

        # set to None if si (nullable) is None
        # and model_fields_set contains the field
        if self.si is None and "si" in self.model_fields_set:
            _dict['si'] = None

        # set to None if sk (nullable) is None
        # and model_fields_set contains the field
        if self.sk is None and "sk" in self.model_fields_set:
            _dict['sk'] = None

        # set to None if sl (nullable) is None
        # and model_fields_set contains the field
        if self.sl is None and "sl" in self.model_fields_set:
            _dict['sl'] = None

        # set to None if smn (nullable) is None
        # and model_fields_set contains the field
        if self.smn is None and "smn" in self.model_fields_set:
            _dict['smn'] = None

        # set to None if sms (nullable) is None
        # and model_fields_set contains the field
        if self.sms is None and "sms" in self.model_fields_set:
            _dict['sms'] = None

        # set to None if so (nullable) is None
        # and model_fields_set contains the field
        if self.so is None and "so" in self.model_fields_set:
            _dict['so'] = None

        # set to None if sq (nullable) is None
        # and model_fields_set contains the field
        if self.sq is None and "sq" in self.model_fields_set:
            _dict['sq'] = None

        # set to None if sr (nullable) is None
        # and model_fields_set contains the field
        if self.sr is None and "sr" in self.model_fields_set:
            _dict['sr'] = None

        # set to None if sr_ec (nullable) is None
        # and model_fields_set contains the field
        if self.sr_ec is None and "sr_ec" in self.model_fields_set:
            _dict['sr-ec'] = None

        # set to None if sr_el (nullable) is None
        # and model_fields_set contains the field
        if self.sr_el is None and "sr_el" in self.model_fields_set:
            _dict['sr-el'] = None

        # set to None if stq (nullable) is None
        # and model_fields_set contains the field
        if self.stq is None and "stq" in self.model_fields_set:
            _dict['stq'] = None

        # set to None if su (nullable) is None
        # and model_fields_set contains the field
        if self.su is None and "su" in self.model_fields_set:
            _dict['su'] = None

        # set to None if sv (nullable) is None
        # and model_fields_set contains the field
        if self.sv is None and "sv" in self.model_fields_set:
            _dict['sv'] = None

        # set to None if sw (nullable) is None
        # and model_fields_set contains the field
        if self.sw is None and "sw" in self.model_fields_set:
            _dict['sw'] = None

        # set to None if syl (nullable) is None
        # and model_fields_set contains the field
        if self.syl is None and "syl" in self.model_fields_set:
            _dict['syl'] = None

        # set to None if szl (nullable) is None
        # and model_fields_set contains the field
        if self.szl is None and "szl" in self.model_fields_set:
            _dict['szl'] = None

        # set to None if ta (nullable) is None
        # and model_fields_set contains the field
        if self.ta is None and "ta" in self.model_fields_set:
            _dict['ta'] = None

        # set to None if te (nullable) is None
        # and model_fields_set contains the field
        if self.te is None and "te" in self.model_fields_set:
            _dict['te'] = None

        # set to None if tg (nullable) is None
        # and model_fields_set contains the field
        if self.tg is None and "tg" in self.model_fields_set:
            _dict['tg'] = None

        # set to None if tg_latn (nullable) is None
        # and model_fields_set contains the field
        if self.tg_latn is None and "tg_latn" in self.model_fields_set:
            _dict['tg-latn'] = None

        # set to None if th (nullable) is None
        # and model_fields_set contains the field
        if self.th is None and "th" in self.model_fields_set:
            _dict['th'] = None

        # set to None if ti (nullable) is None
        # and model_fields_set contains the field
        if self.ti is None and "ti" in self.model_fields_set:
            _dict['ti'] = None

        # set to None if tk (nullable) is None
        # and model_fields_set contains the field
        if self.tk is None and "tk" in self.model_fields_set:
            _dict['tk'] = None

        # set to None if tl (nullable) is None
        # and model_fields_set contains the field
        if self.tl is None and "tl" in self.model_fields_set:
            _dict['tl'] = None

        # set to None if tr (nullable) is None
        # and model_fields_set contains the field
        if self.tr is None and "tr" in self.model_fields_set:
            _dict['tr'] = None

        # set to None if ts (nullable) is None
        # and model_fields_set contains the field
        if self.ts is None and "ts" in self.model_fields_set:
            _dict['ts'] = None

        # set to None if tt (nullable) is None
        # and model_fields_set contains the field
        if self.tt is None and "tt" in self.model_fields_set:
            _dict['tt'] = None

        # set to None if tt_cyrl (nullable) is None
        # and model_fields_set contains the field
        if self.tt_cyrl is None and "tt_cyrl" in self.model_fields_set:
            _dict['tt-cyrl'] = None

        # set to None if tw (nullable) is None
        # and model_fields_set contains the field
        if self.tw is None and "tw" in self.model_fields_set:
            _dict['tw'] = None

        # set to None if ug (nullable) is None
        # and model_fields_set contains the field
        if self.ug is None and "ug" in self.model_fields_set:
            _dict['ug'] = None

        # set to None if uk (nullable) is None
        # and model_fields_set contains the field
        if self.uk is None and "uk" in self.model_fields_set:
            _dict['uk'] = None

        # set to None if ur (nullable) is None
        # and model_fields_set contains the field
        if self.ur is None and "ur" in self.model_fields_set:
            _dict['ur'] = None

        # set to None if uz (nullable) is None
        # and model_fields_set contains the field
        if self.uz is None and "uz" in self.model_fields_set:
            _dict['uz'] = None

        # set to None if vec (nullable) is None
        # and model_fields_set contains the field
        if self.vec is None and "vec" in self.model_fields_set:
            _dict['vec'] = None

        # set to None if vi (nullable) is None
        # and model_fields_set contains the field
        if self.vi is None and "vi" in self.model_fields_set:
            _dict['vi'] = None

        # set to None if vls (nullable) is None
        # and model_fields_set contains the field
        if self.vls is None and "vls" in self.model_fields_set:
            _dict['vls'] = None

        # set to None if vo (nullable) is None
        # and model_fields_set contains the field
        if self.vo is None and "vo" in self.model_fields_set:
            _dict['vo'] = None

        # set to None if vro (nullable) is None
        # and model_fields_set contains the field
        if self.vro is None and "vro" in self.model_fields_set:
            _dict['vro'] = None

        # set to None if wa (nullable) is None
        # and model_fields_set contains the field
        if self.wa is None and "wa" in self.model_fields_set:
            _dict['wa'] = None

        # set to None if war (nullable) is None
        # and model_fields_set contains the field
        if self.war is None and "war" in self.model_fields_set:
            _dict['war'] = None

        # set to None if wo (nullable) is None
        # and model_fields_set contains the field
        if self.wo is None and "wo" in self.model_fields_set:
            _dict['wo'] = None

        # set to None if wuu (nullable) is None
        # and model_fields_set contains the field
        if self.wuu is None and "wuu" in self.model_fields_set:
            _dict['wuu'] = None

        # set to None if xmf (nullable) is None
        # and model_fields_set contains the field
        if self.xmf is None and "xmf" in self.model_fields_set:
            _dict['xmf'] = None

        # set to None if yi (nullable) is None
        # and model_fields_set contains the field
        if self.yi is None and "yi" in self.model_fields_set:
            _dict['yi'] = None

        # set to None if yo (nullable) is None
        # and model_fields_set contains the field
        if self.yo is None and "yo" in self.model_fields_set:
            _dict['yo'] = None

        # set to None if yue (nullable) is None
        # and model_fields_set contains the field
        if self.yue is None and "yue" in self.model_fields_set:
            _dict['yue'] = None

        # set to None if za (nullable) is None
        # and model_fields_set contains the field
        if self.za is None and "za" in self.model_fields_set:
            _dict['za'] = None

        # set to None if zh (nullable) is None
        # and model_fields_set contains the field
        if self.zh is None and "zh" in self.model_fields_set:
            _dict['zh'] = None

        # set to None if zh_cn (nullable) is None
        # and model_fields_set contains the field
        if self.zh_cn is None and "zh_cn" in self.model_fields_set:
            _dict['zh-cn'] = None

        # set to None if zh_hans (nullable) is None
        # and model_fields_set contains the field
        if self.zh_hans is None and "zh_hans" in self.model_fields_set:
            _dict['zh-hans'] = None

        # set to None if zh_hant (nullable) is None
        # and model_fields_set contains the field
        if self.zh_hant is None and "zh_hant" in self.model_fields_set:
            _dict['zh-hant'] = None

        # set to None if zh_hk (nullable) is None
        # and model_fields_set contains the field
        if self.zh_hk is None and "zh_hk" in self.model_fields_set:
            _dict['zh-hk'] = None

        # set to None if zh_mo (nullable) is None
        # and model_fields_set contains the field
        if self.zh_mo is None and "zh_mo" in self.model_fields_set:
            _dict['zh-mo'] = None

        # set to None if zh_my (nullable) is None
        # and model_fields_set contains the field
        if self.zh_my is None and "zh_my" in self.model_fields_set:
            _dict['zh-my'] = None

        # set to None if zh_sg (nullable) is None
        # and model_fields_set contains the field
        if self.zh_sg is None and "zh_sg" in self.model_fields_set:
            _dict['zh-sg'] = None

        # set to None if zh_tw (nullable) is None
        # and model_fields_set contains the field
        if self.zh_tw is None and "zh_tw" in self.model_fields_set:
            _dict['zh-tw'] = None

        # set to None if zu (nullable) is None
        # and model_fields_set contains the field
        if self.zu is None and "zu" in self.model_fields_set:
            _dict['zu'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Internationalisation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ab": obj.get("ab"),
            "ace": obj.get("ace"),
            "aeb-arab": obj.get("aeb-arab"),
            "af": obj.get("af"),
            "ak": obj.get("ak"),
            "alt": obj.get("alt"),
            "am": obj.get("am"),
            "an": obj.get("an"),
            "ang": obj.get("ang"),
            "ar": obj.get("ar"),
            "arc": obj.get("arc"),
            "ary": obj.get("ary"),
            "arz": obj.get("arz"),
            "as": obj.get("as"),
            "ast": obj.get("ast"),
            "atj": obj.get("atj"),
            "ay": obj.get("ay"),
            "az": obj.get("az"),
            "azb": obj.get("azb"),
            "ba": obj.get("ba"),
            "ban": obj.get("ban"),
            "bar": obj.get("bar"),
            "bcl": obj.get("bcl"),
            "be": obj.get("be"),
            "be-tarask": obj.get("be-tarask"),
            "bg": obj.get("bg"),
            "bho": obj.get("bho"),
            "bi": obj.get("bi"),
            "bm": obj.get("bm"),
            "bn": obj.get("bn"),
            "bo": obj.get("bo"),
            "bpy": obj.get("bpy"),
            "br": obj.get("br"),
            "bs": obj.get("bs"),
            "bxr": obj.get("bxr"),
            "ca": obj.get("ca"),
            "cbk-zam": obj.get("cbk-zam"),
            "cdo": obj.get("cdo"),
            "ce": obj.get("ce"),
            "ceb": obj.get("ceb"),
            "chr": obj.get("chr"),
            "ckb": obj.get("ckb"),
            "co": obj.get("co"),
            "crh": obj.get("crh"),
            "crh-latn": obj.get("crh-latn"),
            "cs": obj.get("cs"),
            "csb": obj.get("csb"),
            "cv": obj.get("cv"),
            "cy": obj.get("cy"),
            "da": obj.get("da"),
            "de": obj.get("de"),
            "de-at": obj.get("de-at"),
            "de-ch": obj.get("de-ch"),
            "diq": obj.get("diq"),
            "dv": obj.get("dv"),
            "el": obj.get("el"),
            "eml": obj.get("eml"),
            "en": obj.get("en"),
            "en-ca": obj.get("en-ca"),
            "en-gb": obj.get("en-gb"),
            "en-us": obj.get("en-us"),
            "eo": obj.get("eo"),
            "es": obj.get("es"),
            "et": obj.get("et"),
            "eu": obj.get("eu"),
            "ext": obj.get("ext"),
            "fa": obj.get("fa"),
            "fi": obj.get("fi"),
            "fo": obj.get("fo"),
            "fr": obj.get("fr"),
            "frc": obj.get("frc"),
            "frp": obj.get("frp"),
            "frr": obj.get("frr"),
            "fur": obj.get("fur"),
            "fy": obj.get("fy"),
            "ga": obj.get("ga"),
            "gan": obj.get("gan"),
            "gan-hans": obj.get("gan-hans"),
            "gan-hant": obj.get("gan-hant"),
            "gcr": obj.get("gcr"),
            "gd": obj.get("gd"),
            "gl": obj.get("gl"),
            "gn": obj.get("gn"),
            "gpe": obj.get("gpe"),
            "gsw": obj.get("gsw"),
            "gu": obj.get("gu"),
            "gv": obj.get("gv"),
            "ha": obj.get("ha"),
            "hak": obj.get("hak"),
            "he": obj.get("he"),
            "hi": obj.get("hi"),
            "hif": obj.get("hif"),
            "hr": obj.get("hr"),
            "hsb": obj.get("hsb"),
            "ht": obj.get("ht"),
            "hu": obj.get("hu"),
            "hy": obj.get("hy"),
            "hyw": obj.get("hyw"),
            "ia": obj.get("ia"),
            "id": obj.get("id"),
            "ie": obj.get("ie"),
            "ig": obj.get("ig"),
            "ilo": obj.get("ilo"),
            "inh": obj.get("inh"),
            "io": obj.get("io"),
            "is": obj.get("is"),
            "it": obj.get("it"),
            "iu": obj.get("iu"),
            "ja": obj.get("ja"),
            "jam": obj.get("jam"),
            "jv": obj.get("jv"),
            "ka": obj.get("ka"),
            "kaa": obj.get("kaa"),
            "kab": obj.get("kab"),
            "kbp": obj.get("kbp"),
            "kg": obj.get("kg"),
            "kk": obj.get("kk"),
            "kk-arab": obj.get("kk-arab"),
            "kk-cn": obj.get("kk-cn"),
            "kk-cyrl": obj.get("kk-cyrl"),
            "kk-kz": obj.get("kk-kz"),
            "kk-latn": obj.get("kk-latn"),
            "kk-tr": obj.get("kk-tr"),
            "kl": obj.get("kl"),
            "km": obj.get("km"),
            "kn": obj.get("kn"),
            "ko": obj.get("ko"),
            "ko-kp": obj.get("ko-kp"),
            "krc": obj.get("krc"),
            "ks": obj.get("ks"),
            "ksh": obj.get("ksh"),
            "ku": obj.get("ku"),
            "ku-latn": obj.get("ku-latn"),
            "kw": obj.get("kw"),
            "ky": obj.get("ky"),
            "la": obj.get("la"),
            "lad": obj.get("lad"),
            "lb": obj.get("lb"),
            "lfn": obj.get("lfn"),
            "li": obj.get("li"),
            "lij": obj.get("lij"),
            "lld": obj.get("lld"),
            "lmo": obj.get("lmo"),
            "lo": obj.get("lo"),
            "lt": obj.get("lt"),
            "lv": obj.get("lv"),
            "lzh": obj.get("lzh"),
            "mai": obj.get("mai"),
            "mg": obj.get("mg"),
            "min": obj.get("min"),
            "mk": obj.get("mk"),
            "ml": obj.get("ml"),
            "mn": obj.get("mn"),
            "mni": obj.get("mni"),
            "mr": obj.get("mr"),
            "ms": obj.get("ms"),
            "ms-arab": obj.get("ms-arab"),
            "mt": obj.get("mt"),
            "mwl": obj.get("mwl"),
            "my": obj.get("my"),
            "mzn": obj.get("mzn"),
            "nah": obj.get("nah"),
            "nan": obj.get("nan"),
            "nap": obj.get("nap"),
            "nb": obj.get("nb"),
            "nds": obj.get("nds"),
            "nds-nl": obj.get("nds-nl"),
            "ne": obj.get("ne"),
            "new": obj.get("new"),
            "nia": obj.get("nia"),
            "nl": obj.get("nl"),
            "nn": obj.get("nn"),
            "nov": obj.get("nov"),
            "nqo": obj.get("nqo"),
            "nrm": obj.get("nrm"),
            "oc": obj.get("oc"),
            "or": obj.get("or"),
            "os": obj.get("os"),
            "pa": obj.get("pa"),
            "pam": obj.get("pam"),
            "pap": obj.get("pap"),
            "pcd": obj.get("pcd"),
            "pdc": obj.get("pdc"),
            "pih": obj.get("pih"),
            "pl": obj.get("pl"),
            "pms": obj.get("pms"),
            "pnb": obj.get("pnb"),
            "ps": obj.get("ps"),
            "pt": obj.get("pt"),
            "pt-br": obj.get("pt-br"),
            "qu": obj.get("qu"),
            "rm": obj.get("rm"),
            "ro": obj.get("ro"),
            "ru": obj.get("ru"),
            "rue": obj.get("rue"),
            "rw": obj.get("rw"),
            "sa": obj.get("sa"),
            "sah": obj.get("sah"),
            "sat": obj.get("sat"),
            "sc": obj.get("sc"),
            "scn": obj.get("scn"),
            "sco": obj.get("sco"),
            "sd": obj.get("sd"),
            "se": obj.get("se"),
            "sgs": obj.get("sgs"),
            "sh": obj.get("sh"),
            "shi": obj.get("shi"),
            "si": obj.get("si"),
            "sk": obj.get("sk"),
            "sl": obj.get("sl"),
            "smn": obj.get("smn"),
            "sms": obj.get("sms"),
            "so": obj.get("so"),
            "sq": obj.get("sq"),
            "sr": obj.get("sr"),
            "sr-ec": obj.get("sr-ec"),
            "sr-el": obj.get("sr-el"),
            "stq": obj.get("stq"),
            "su": obj.get("su"),
            "sv": obj.get("sv"),
            "sw": obj.get("sw"),
            "syl": obj.get("syl"),
            "szl": obj.get("szl"),
            "ta": obj.get("ta"),
            "te": obj.get("te"),
            "tg": obj.get("tg"),
            "tg-latn": obj.get("tg-latn"),
            "th": obj.get("th"),
            "ti": obj.get("ti"),
            "tk": obj.get("tk"),
            "tl": obj.get("tl"),
            "tr": obj.get("tr"),
            "ts": obj.get("ts"),
            "tt": obj.get("tt"),
            "tt-cyrl": obj.get("tt-cyrl"),
            "tw": obj.get("tw"),
            "ug": obj.get("ug"),
            "uk": obj.get("uk"),
            "ur": obj.get("ur"),
            "uz": obj.get("uz"),
            "vec": obj.get("vec"),
            "vi": obj.get("vi"),
            "vls": obj.get("vls"),
            "vo": obj.get("vo"),
            "vro": obj.get("vro"),
            "wa": obj.get("wa"),
            "war": obj.get("war"),
            "wo": obj.get("wo"),
            "wuu": obj.get("wuu"),
            "xmf": obj.get("xmf"),
            "yi": obj.get("yi"),
            "yo": obj.get("yo"),
            "yue": obj.get("yue"),
            "za": obj.get("za"),
            "zh": obj.get("zh"),
            "zh-cn": obj.get("zh-cn"),
            "zh-hans": obj.get("zh-hans"),
            "zh-hant": obj.get("zh-hant"),
            "zh-hk": obj.get("zh-hk"),
            "zh-mo": obj.get("zh-mo"),
            "zh-my": obj.get("zh-my"),
            "zh-sg": obj.get("zh-sg"),
            "zh-tw": obj.get("zh-tw"),
            "zu": obj.get("zu")
        })
        return _obj


