# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  This OpenAPI specification is derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).

    The version of the OpenAPI document: 0.0.4-3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Ids(BaseModel):
    """
    Ids
    """ # noqa: E501
    crossref: Optional[Any] = None
    doi: Optional[Any] = None
    fatcat: Optional[Any] = None
    grid: Optional[Any] = None
    issn: Optional[Any] = None
    issn_l: Optional[Any] = None
    mag: Optional[Any] = None
    openalex: Optional[Any]
    orcid: Optional[Any] = None
    pmcid: Optional[Any] = None
    pmid: Optional[Any] = None
    ror: Optional[Any] = None
    scopus: Optional[Any] = None
    wikidata: Optional[Any] = None
    wikipedia: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["crossref", "doi", "fatcat", "grid", "issn", "issn_l", "mag", "openalex", "orcid", "pmcid", "pmid", "ror", "scopus", "wikidata", "wikipedia"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Ids from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if crossref (nullable) is None
        # and model_fields_set contains the field
        if self.crossref is None and "crossref" in self.model_fields_set:
            _dict['crossref'] = None

        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['doi'] = None

        # set to None if fatcat (nullable) is None
        # and model_fields_set contains the field
        if self.fatcat is None and "fatcat" in self.model_fields_set:
            _dict['fatcat'] = None

        # set to None if grid (nullable) is None
        # and model_fields_set contains the field
        if self.grid is None and "grid" in self.model_fields_set:
            _dict['grid'] = None

        # set to None if issn (nullable) is None
        # and model_fields_set contains the field
        if self.issn is None and "issn" in self.model_fields_set:
            _dict['issn'] = None

        # set to None if issn_l (nullable) is None
        # and model_fields_set contains the field
        if self.issn_l is None and "issn_l" in self.model_fields_set:
            _dict['issn_l'] = None

        # set to None if mag (nullable) is None
        # and model_fields_set contains the field
        if self.mag is None and "mag" in self.model_fields_set:
            _dict['mag'] = None

        # set to None if openalex (nullable) is None
        # and model_fields_set contains the field
        if self.openalex is None and "openalex" in self.model_fields_set:
            _dict['openalex'] = None

        # set to None if orcid (nullable) is None
        # and model_fields_set contains the field
        if self.orcid is None and "orcid" in self.model_fields_set:
            _dict['orcid'] = None

        # set to None if pmcid (nullable) is None
        # and model_fields_set contains the field
        if self.pmcid is None and "pmcid" in self.model_fields_set:
            _dict['pmcid'] = None

        # set to None if pmid (nullable) is None
        # and model_fields_set contains the field
        if self.pmid is None and "pmid" in self.model_fields_set:
            _dict['pmid'] = None

        # set to None if ror (nullable) is None
        # and model_fields_set contains the field
        if self.ror is None and "ror" in self.model_fields_set:
            _dict['ror'] = None

        # set to None if scopus (nullable) is None
        # and model_fields_set contains the field
        if self.scopus is None and "scopus" in self.model_fields_set:
            _dict['scopus'] = None

        # set to None if wikidata (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata is None and "wikidata" in self.model_fields_set:
            _dict['wikidata'] = None

        # set to None if wikipedia (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia is None and "wikipedia" in self.model_fields_set:
            _dict['wikipedia'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Ids from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crossref": obj.get("crossref"),
            "doi": obj.get("doi"),
            "fatcat": obj.get("fatcat"),
            "grid": obj.get("grid"),
            "issn": obj.get("issn"),
            "issn_l": obj.get("issn_l"),
            "mag": obj.get("mag"),
            "openalex": obj.get("openalex"),
            "orcid": obj.get("orcid"),
            "pmcid": obj.get("pmcid"),
            "pmid": obj.get("pmid"),
            "ror": obj.get("ror"),
            "scopus": obj.get("scopus"),
            "wikidata": obj.get("wikidata"),
            "wikipedia": obj.get("wikipedia")
        })
        return _obj


